abstract: 'The MinION is a portable DNA sequencer that generates long error-prone
  reads. As both the hardware and analysis software are updated regularly, the most
  suitable pipeline for subsequent analyses of a dataset generated with a given combination
  of hardware and software for a given organism is not always clear. Here we present
  a benchmark for a selection of <i>de novo</i> assemblers available to MinION users,
  on a read set of <i>Escherichia coli</i> (NCBI taxID: 562). This benchmark is based
  on a <a href=\>benchmarking routine</a>, designed to facilitate easy replication
  on a read set of choice and addition of other <i>de novo</i> assembly pipelines.'
assembly_quality: 'Produced assemblies were analyzed and compared on continuity and
  agreement with the reference genome. Quast (version: 4.6.3) was used to determine
  a wide array of quality metrics in both quality categories and produce synteny plots.
  To elucidate any bias in the occurence of certain sequences, 5-mers in the assemblies
  and the reference genomes were compared using Jellyfish (version: 2.2.6). Finally,
  results were summarized using MultiQC.'
authors: Carlos de Lannoy, data from data from [Loman Labs](http://lab.loman.net/2017/03/09/ultrareads-for-nanopore/)
pipelines: '<h4>smartdenovo</h4>SMARTdenovo is a long read OLC assembly pipeline that
  was originally intended to work with PacBio reads, but has been shown to produce
  assemblies of reasonably high continuity from MinION reads as well.<br>&zwnj;<br>&zwnj;<b>Included
  tools:</b><ul><li>smartdenovo (version: 1.0.0) </li></ul><br>&zwnj;<b>Used command:</b><pre><code>smartdenovo.pl
  -p smartdenovo_assembly {input.fastq} > smartdenovo_assembly.mak

  make -f smartdenovo_assembly.mak

  if [ -e smartdenovo_assembly.cns ]; then mv smartdenovo_assembly.cns {output}; elif
  [ -e smartdenovo_assembly.dmo.lay.utg ]; then mv smartdenovo_assembly.dmo.lay.utg
  {output}; fi

  </code></pre><h4>minimap2 miniasm nanopolish</h4>Minimap2 is a fast all-vs-all mapper
  of reads that relies on sketches of sequences, composed of minimizers. Miniasm uses
  the found overlaps to construct an assembly graph. As a consensus step is lacking
  in this pipeline, post-assembly polishing is often required. Here, nanopolish is
  used to polish the assembly using the raw signal.<br>&zwnj;<br>&zwnj;<b>Included
  tools:</b><ul><li>minimap2 (version: 2.10-r761) </li><li>miniasm (version: 0.2-r128)
  </li><li>nanopolish (version: 0.9.2) </li></ul><br>&zwnj;<b>Used command:</b><pre><code>minimap2
  -x ava-ont -t {threads} {input.fastq} {input.fastq} | gzip -1 > minimap2.paf.gz

  miniasm -f {input.fastq} minimap2.paf.gz > minimap2_miniasm.gfa

  grep -Po ''(?<=S\t)utg.+\s[ACTG]+'' minimap2_miniasm.gfa | awk ''{{print ">"$1"\\n"$2}}''
  | fold > minimap2_miniasm.fasta

  minimap2 -d draft.mmi minimap2_miniasm.fasta

  cp {input.fastq} input.fastq

  minimap2 -ax map-ont -t {threads} draft.mmi  input.fastq | samtools sort -@ {threads}
  -o reads_sorted.bam -T reads_sorted.tmp -

  samtools index reads_sorted.bam

  nanopolish index -d /mnt/nexenta/lanno001/nobackup/readFiles/ecoliLoman/ecoliLoman_mapped_subset/
  input.fastq

  # threads_per_process=$( expr {threads} / 4 )

  threads_per_process=1

  np_path=$(command -v nanopolish | xargs realpath | xargs dirname)

  python "${{np_path}}"/nanopolish_makerange.py minimap2_miniasm.fasta | parallel
  --no-notice --results nanopolish.results -P 4 nanopolish variants --consensus polished.{{1}}.fa
  -w {{1}} -r input.fastq -b reads_sorted.bam -g minimap2_miniasm.fasta -t ${{threads_per_process}}

  python "${{np_path}}"/nanopolish_merge.py polished.*.fa > {output}

  </code></pre>'
readset_quality: 'Reads in this dataset were generated on a Minion with FLO-MIN106
  flowcell with SQK-LSK108 kit. The reads were basecalled using Albacore 2.2.7. Prior
  to assembly, the quality of the untreated readset was analysed using NanoPlot (version:
  1.14.1) and mapped using the mappy module (version: None) in Python3.'
